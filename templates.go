// Code generated by go-bindata.
// sources:
// public/auth.html
// public/denied.html
// DO NOT EDIT!

package authproxy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicAuthHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4a\x04\x31\x0c\x86\xef\x3e\x45\xdc\x83\x47\xb3\xb8\x8e\xac\x4b\x67\xc4\x93\x17\x0f\xbe\x81\x74\x66\xd2\x69\xa0\xd3\x94\x4e\x0a\xae\x4f\x2f\x9d\x82\x88\x97\xe4\x0b\x24\x3f\xf9\x8c\xd7\x35\x0c\x37\x00\xc6\x93\x9d\x77\xc0\x5f\x1a\x65\xbe\x56\x00\x30\xa9\x75\x80\x37\x56\x5f\x46\x78\x2d\xea\x29\x2a\x4f\x56\x59\x22\x7c\x64\xf9\xba\xb6\x4d\x4c\xff\x4f\x8c\x05\x9f\xc9\xf5\x07\xaf\x9a\xb6\x0b\xe2\xb2\x67\xdc\x4f\xb2\x62\x90\x85\x23\x8a\x2d\xea\xb1\x16\xc9\xfc\x4d\x2f\xdb\x24\x89\xfa\xb2\x51\xbe\xd0\x6a\x39\xdc\x4d\x81\x29\xea\x27\xcf\xfd\xd3\xe3\xf1\xe1\x7c\x74\xf6\xec\x1c\xcd\x5d\xd7\x9d\x4e\xcf\xe3\x61\x78\xaf\x31\x06\xed\x00\x2a\x30\xd2\xc2\xf1\xb6\x4e\x7f\x3f\x32\xd8\x74\x0c\x36\xe5\x9f\x00\x00\x00\xff\xff\xb5\x12\x0f\xcb\xfa\x00\x00\x00")

func publicAuthHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicAuthHtml,
		"public/auth.html",
	)
}

func publicAuthHtml() (*asset, error) {
	bytes, err := publicAuthHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/auth.html", size: 250, mode: os.FileMode(420), modTime: time.Unix(1501818621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicDeniedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xce\x41\x0a\x02\x31\x0c\x85\xe1\xbd\xa7\x78\x07\x10\xe6\x02\xc5\x7b\xb8\xcc\x4c\x1f\xb4\xe0\x24\x43\x93\x2e\xea\xe9\x45\x03\xae\xf2\xad\xf2\xbf\xd2\xe2\x7c\x3d\x6e\x40\x69\x94\xfa\xc3\xf6\xd7\x6e\x75\x7d\x01\x94\x2b\x2f\xf0\xb4\x39\x20\xc7\x41\x77\x34\x71\xec\xa4\xa2\x52\x3b\xeb\x1d\xcb\x26\x64\x10\x6a\x01\x51\xc8\x8c\x66\xa3\xbf\x59\x31\x9d\x03\x5d\x11\xad\x3b\x7c\x79\xf0\xcc\xc7\xdb\x95\xd1\x6c\x95\x2d\xf7\x7c\x02\x00\x00\xff\xff\x26\x40\x3a\x44\x97\x00\x00\x00")

func publicDeniedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicDeniedHtml,
		"public/denied.html",
	)
}

func publicDeniedHtml() (*asset, error) {
	bytes, err := publicDeniedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/denied.html", size: 151, mode: os.FileMode(420), modTime: time.Unix(1501818654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/auth.html":   publicAuthHtml,
	"public/denied.html": publicDeniedHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"auth.html":   &bintree{publicAuthHtml, map[string]*bintree{}},
		"denied.html": &bintree{publicDeniedHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
