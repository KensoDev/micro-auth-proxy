// Code generated by go-bindata.
// sources:
// public/auth0.html.tpl
// public/denied.html
// public/github.html.tpl
// DO NOT EDIT!

package authproxy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicAuth0HtmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x41\x6b\xc3\x30\x0c\x85\xef\xfb\x15\x5a\x0e\x3b\x46\x3b\x0f\x27\x63\x2c\x97\x42\x4e\x85\xfe\x00\xc5\x71\x63\x53\xc7\x36\xa9\x02\x0d\xc6\xff\xbd\x38\x86\xb6\xf4\xa4\xef\x21\x3d\xf1\x9e\xd0\x3c\xdb\xf6\x03\x40\x68\x45\xe3\x0e\xf8\xa0\xc1\x8f\x5b\x06\x00\x11\xca\x04\xf8\x5b\x59\x7f\x03\xad\xac\x95\x63\x23\x89\x8d\x77\x10\x16\x7f\xdb\xca\x21\x86\x77\x87\x20\xd0\x8b\x3a\x37\x95\x66\x0e\xd7\x1f\xc4\x18\xeb\xfc\xa5\xf3\x33\x19\x97\x12\x5a\x3f\x19\xf7\x2b\xad\x51\x8e\x9b\x18\xeb\xff\x9d\x0e\x5d\x4a\x5f\x92\xac\x1d\x48\x5e\x4e\xc7\x7e\xdf\x3c\x65\x4a\x55\xdb\x67\xa3\x40\x6a\x81\x3d\x0c\x6a\x32\xee\x33\xab\xd7\x20\x02\x4b\x09\x81\xa5\xe8\x3d\x00\x00\xff\xff\x8d\xc1\xc2\xee\xf0\x00\x00\x00")

func publicAuth0HtmlTplBytes() ([]byte, error) {
	return bindataRead(
		_publicAuth0HtmlTpl,
		"public/auth0.html.tpl",
	)
}

func publicAuth0HtmlTpl() (*asset, error) {
	bytes, err := publicAuth0HtmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/auth0.html.tpl", size: 240, mode: os.FileMode(420), modTime: time.Unix(1503085967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicDeniedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xce\x41\x0a\x02\x31\x0c\x85\xe1\xbd\xa7\x78\x07\x10\xe6\x02\xc5\x7b\xb8\xcc\x4c\x1f\xb4\xe0\x24\x43\x93\x2e\xea\xe9\x45\x03\xae\xf2\xad\xf2\xbf\xd2\xe2\x7c\x3d\x6e\x40\x69\x94\xfa\xc3\xf6\xd7\x6e\x75\x7d\x01\x94\x2b\x2f\xf0\xb4\x39\x20\xc7\x41\x77\x34\x71\xec\xa4\xa2\x52\x3b\xeb\x1d\xcb\x26\x64\x10\x6a\x01\x51\xc8\x8c\x66\xa3\xbf\x59\x31\x9d\x03\x5d\x11\xad\x3b\x7c\x79\xf0\xcc\xc7\xdb\x95\xd1\x6c\x95\x2d\xf7\x7c\x02\x00\x00\xff\xff\x26\x40\x3a\x44\x97\x00\x00\x00")

func publicDeniedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicDeniedHtml,
		"public/denied.html",
	)
}

func publicDeniedHtml() (*asset, error) {
	bytes, err := publicDeniedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/denied.html", size: 151, mode: os.FileMode(420), modTime: time.Unix(1501818654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicGithubHtmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xd1\x4a\xc6\x30\x0c\x85\xef\x7d\x8a\xf8\x5f\x78\xf9\xe7\x7e\x74\x13\x51\x10\xc1\x0b\xdf\x40\xba\x2e\xae\x81\xae\x29\x5d\x0a\xce\xb1\x77\x97\xae\x20\xf2\xdf\x24\xdf\x81\x9c\x70\x8e\xf1\xba\x84\xe1\x0e\xc0\x78\xb2\xd3\x09\xf8\x47\xa3\x4c\x5b\x05\x00\x93\xda\x06\x78\x65\xf5\x65\x84\xa7\xa2\x9e\xa2\xb2\xb3\xca\x12\xe1\x23\xcb\xf7\xd6\x2e\x31\xdd\x5a\x8c\x05\x9f\xe9\xab\xbf\x78\xd5\xb4\x76\x88\xf3\xf9\xe3\xea\x64\xc1\x20\x33\x47\x14\x5b\xd4\x63\x1d\x92\xf9\x87\x1e\x57\x27\x89\xfa\xb2\x52\xee\x68\xb1\x1c\x1e\x5c\x60\x8a\xfa\xc9\x53\xbf\xef\xd7\xe7\x53\xbc\xbd\x1c\xc7\x65\x78\xaf\x7e\x83\x76\x00\x15\x18\x69\xe6\x78\x5f\xd5\xff\x28\x06\x5b\x0f\x83\xad\xeb\x6f\x00\x00\x00\xff\xff\x6c\xc2\x83\x19\xf3\x00\x00\x00")

func publicGithubHtmlTplBytes() ([]byte, error) {
	return bindataRead(
		_publicGithubHtmlTpl,
		"public/github.html.tpl",
	)
}

func publicGithubHtmlTpl() (*asset, error) {
	bytes, err := publicGithubHtmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/github.html.tpl", size: 243, mode: os.FileMode(420), modTime: time.Unix(1503085899, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/auth0.html.tpl":  publicAuth0HtmlTpl,
	"public/denied.html":     publicDeniedHtml,
	"public/github.html.tpl": publicGithubHtmlTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"auth0.html.tpl":  &bintree{publicAuth0HtmlTpl, map[string]*bintree{}},
		"denied.html":     &bintree{publicDeniedHtml, map[string]*bintree{}},
		"github.html.tpl": &bintree{publicGithubHtmlTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
